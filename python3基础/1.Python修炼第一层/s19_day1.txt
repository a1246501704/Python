
Python 19




海峰老师博客
http://www.cnblogs.com/linhaifeng/

day1课程
http://www.cnblogs.com/linhaifeng/articles/7133167.html

oldboy_python_大纲
https://triaquae.gitbooks.io/python/content/chapter1.html




一 编程与编程语言

    python是一门编程语言，作为学习python的开始，需要事先搞明白：编程的目的是什么？什么是编程语言？什么是编程？

编程的目的：
	#计算机的发明，是为了用机器取代/解放人力，而编程的目的则是将人类的思想流程按照某种能够被计算机识别的表达方式传递给计算机，从而达到让计算机能够像人脑/电脑一样自动执行的效果。    

什么是编程语言？
	#上面提及的能够被计算机所识别的表达方式即编程语言，语言是沟通的介质，而编程语言是程序员与计算机沟通的介质。在编程的世界里，计算机更像是人的奴隶，人类编程的目的就命令奴隶去工作。

什么是编程？
	#编程即程序员根据需求把自己的思想流程按照某种编程语言的语法风格编写下来，产出的结果就是包含一堆字符的文件。
	#强调：程序在未运行前跟普通文件无异，只有程序在运行时，文件内所写的字符才有特定的语法意义


二 编程语言分类

编程的语言的发展经历了
	#机器语言：站在计算机(奴隶)的角度，说计算机能听懂的语言，那就是直接用二进制编程，直接操作硬件；
	#汇编语言：站在计算机(奴隶)的角度，简写的英文标识符取代二进制去编写程序，本质仍然是直接操作硬件；
	#高级语言：站在人(奴隶主)的角度，说人话，即用人类的字符去编写程序，屏蔽了硬件操作

    高级语言更贴近人类语言，因而造成了：它必须被翻译成计算机能读懂二进制后，才能被执行，按照翻译方式分为

	#1. 编译型（需要编译器，相当于用谷歌翻译）：如C，执行速度快，调试麻烦
	#2. 解释型（需要解释器，相当于同声传译）：如python，执行速度慢，调试方便

总结：

机器语言
	#优点是最底层，执行速度最快
	#缺点是最复杂，开发效率最低

汇编语言
	#优点是比较底层，执行速度最快
	#缺点是复杂，开发效率最低

高级语言
	#编译型语言执行速度快，不依赖语言环境运行，跨平台差
	#解释型跨平台好，一份代码，到处使用，缺点是执行速度慢，依赖解释器运行



    PS：
　　　　学习难度从高到低

            执行效率从高到低

　　　　开发效率从低到高　　　

　　速度不是关键（瓶颈理论），开发效率高才是王道

python介绍
    介绍
    python的创始人为吉多·范罗苏姆（Guido van Rossum）。
	1989年的圣诞节期间，Guido开始写能够解释Python语言语法的解释器。
	Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。
	他希望这个新的叫做Python的语言，
	能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。

目前Python主要应用领域
	#1. WEB开发——最火的Python web框架Django, 支持异步高并发的Tornado框架，短小精悍的flask,bottle, Django官方的标语把Django定义为the framework for perfectionist with deadlines(大意是一个为完全主义者开发的高效率web框架)
	#2. 网络编程——支持高并发的Twisted网络框架， py3引入的asyncio使异步编程变的非常简单
	#3. 爬虫——爬虫领域，Python几乎是霸主地位，Scrapy\Request\BeautifuSoap\urllib等，想爬啥就爬啥
	#4. 云计算——目前最火最知名的云计算框架就是OpenStack,Python现在的火，很大一部分就是因为云计算
	#5. 人工智能——谁会成为AI 和大数据时代的第一开发语言？这本已是一个不需要争论的问题。如果说三年前，Matlab、Scala、R、Java 和 Python还各有机会，局面尚且不清楚，那么三年之后，趋势已经非常明确了，特别是前两天 Facebook 开源了 PyTorch 之后，Python 作为 AI 时代头牌语言的位置基本确立，未来的悬念仅仅是谁能坐稳第二把交椅。
	#6. 自动化运维——问问中国的每个运维人员，运维人员必须会的语言是什么？10个人相信会给你一个相同的答案，它的名字叫Python
	#7. 金融分析——我个人之前在金融行业，10年的时候，我们公司写的好多分析程序、高频交易软件就是用的Python,到目前,Python是金融分析、量化交易领域里用的最多的语言
	#8. 科学运算—— 你知道么,97年开始，NASA就在大量使用Python在进行各种复杂的科学运算，随着NumPy, SciPy, Matplotlib, Enthought librarys等众多程序库的开发，使的Python越来越适合于做科学计算、绘制高质量的2D和3D图像。和科学计算领域最流行的商业软件Matlab相比，Python是一门通用的程序设计语言，比Matlab所采用的脚本语言的应用范围更广泛
	#9. 游戏开发——在网络游戏开发中Python也有很多应用。相比Lua or C++,Python 比 Lua 有更高阶的抽象能力，可以用更少的代码描述游戏业务逻辑，与 Lua 相比，Python 更适合作为一种 Host 语言，即程序的入口点是在 Python 那一端会比较好，然后用 C/C++ 在非常必要的时候写一些扩展。Python 非常适合编写 1 万行以上的项目，而且能够很好地把网游项目的规模控制在 10 万行代码以内。另外据我所知，知名的游戏<文明> 就是用Python写的

Python(解释器)的发展史
	# 1989年，Guido开始写Python语言的编译器。
	# 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。
	# Granddaddy of Python web frameworks, Zope 1 was released in 1999
	# Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.
	# Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础
	# Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生
	# Python 2.5 - September 19, 2006
	# Python 2.6 - October 1, 2008
	# Python 2.7 - July 3, 2010
	# In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible
	# Python 3.0 - December 3, 2008 (这里要解释清楚 为什么08年就出3.0，2010年反而又推出了2.7？是因为3.0不向下兼容2.0，导致大家都拒绝升级3.0，无奈官方只能推出2.7过渡版本)
	# Python 3.1 - June 27, 2009
	# Python 3.2 - February 20, 2011
	# Python 3.3 - September 29, 2012
	# Python 3.4 - March 16, 2014
	# Python 3.5 - September 13, 2015
	# Python 3.6 - 2016-12-23 发布python3.6.0版

Python 有哪些种类?

	我们现在知道了Python是一门解释型语言，代码想运行，必须通过解释器执行，Python的解释器本身也可以看作是个程序（翻译官司是哪国人不重要），这个程序是什么语言开发的呢？ 答案是好几种语言？ what? 因为Python有好几种解释器，分别基于不同语言开发，每个解释器特点不同，但都能正常运行我们的Python代码，下面分别来看下：
	
	#CPython：CPython是使用最广且被的Python解释器。本教程以CPython为准。
	当我们从Python官方网站下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。
	
	#IPython
	IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。
	CPython用>>>作为提示符，而IPython用In [序号]:作为提示符。
	
	#PyPy
	PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。
	绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。
	
	#Jython
	Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。
	
	#IronPython
	IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。

Python 2 or Python 3 ?
	目前虽然业内很多企业还在大量使用Python2.6 or 2.7，因为旧项目几十万甚至上百万行的代码想快速升级到3.0不是件容易的事，但是大家在开发新项目时几乎都会使用3.x。
	另外Python3 确实想比2.x做了很多的改进，直观点来讲，就像从XP升级到Win7的感觉一样，棒棒的。
	Py2 和Py3的具体细节区别我们在以后课程中会慢慢深入。


安装python解释器

    Python目前已支持所有主流操作系统，在Linux,Unix,Mac系统上自带Python环境，在Windows系统上需要安装一下，超简单

    打开官网 https://www.python.org/downloads/windows/ 下载中心

	#测试安装是否成功
	windows --> 运行 --> 输入cmd ，然后回车，弹出cmd程序，输入python,如果能进入交互环境 ，代表安装成功。

	#多版本共存演示
	注意：在安装目录下找到python.exe,拷贝一份，命名为python2.exe或python3.exe，一定要保留原版，因为pip工具会调用它。

安装pycharm软件
	https://www.jetbrains.com/pycharm/
	https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows



变量

什么是变量
	#变量即变化的量，核心是“变”与“量”二字，变即变化，量即衡量状态。

为什么要有变量
	#程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态以及状态的变化。
	#比如：
		英雄的等级为1，打怪升级(变)为10
		僵尸的存活状态True，被植物打死了，于是变为False
		人的名字为egon，也可以修改为Egon 

如何定义变量（图解）
	#变量名(相当于门牌号，指向值所在的空间)，等号，变量值
	name='Egon'
	sex='male'
	age=18
	level=10

变量的定义规范
	#1. 变量名只能是 字母、数字或下划线的任意组合
	#2. 变量名的第一个字符不能是数字
	#3. 关键字不能声明为变量名
		['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']

定义方式：
	#驼峰体
	AgeOfOldboy = 56 
	NumberOfStudents = 80
	#下划线(推荐使用)
	age_of_oldboy = 56 
	number_of_students = 80

定义变量名不好的方式
	#1. 变量名为中文、拼音
	#2. 变量名过长
	#3. 变量名词不达意

定义变量会有：id，type，value
	#1 等号比较的是value，
	#2 is比较的是id

	#强调：
	#1. id相同，意味着type和value必定相同
	#2. value相同type肯定相同，但id可能不同,如下
	>>> x='Info Egon:18'
	>>> y='Info Egon:18'
	>>> id(x)
	4376607152
	>>> id(y)
	4376607408
	>>> 
	>>> x == y
	True
	>>> x is y
	False

变量的修改与内存管理（引用计数与垃圾回收机制）
	python解释器 回收垃圾
	回收内存垃圾 
	内存空间 引用计数
	python 会回收 引用计数为零的内存空间


常量
	常量即指不变的量，如pai 3.141592653..., 或在程序运行过程中不会改变的量
	举例，假如老男孩老师的年龄会变，那这就是个变量，但在一些情况下，他的年龄不会变了，那就是常量。在Python中没有一个专门的语法代表常量，程序员约定俗成用变量名全部大写代表常量
	AGE_OF_OLDBOY = 56

	常量
	固定 不变的值
	用全大写 规范 来定制 常量名
	来提示常量的值 不可修改
	
	#ps:在c语言中有专门的常量定义语法，const int count = 60;一旦定义为常量，更改即会报错 

	
用户与程序交互
	
	#在python3中
	input：用户输入任何值，都存成字符串类型

	#在python2中
	input：用户输入什么类型，就存成什么类型
	raw_input：等于python3的input

	代码注释分单行和多行注释， 单行注释用#，多行注释可以用三对双引号""" """
    代码注释的原则：
		#1. 不用全部加注释，只需要在自己觉得重要或不好理解的部分加注释即可
		#2. 注释可以用中文或英文，但不要用拼音

    文件头
		#!/usr/bin/env python
		# -*- coding: utf-8 -*- 

	python2 不支持中文  文件头 声明字符编码	


基本数据类型

数字
	int整型：年纪，身份证号，等级
	age=18
	age=int(18)

float浮点型： 身高，体重，薪资
	height=1.81
	print(type(height),height)
		<class 'float'> 1.81

字符串类型：把一堆字符放到单引号、双引号、三引号中,是一样的
字符串：表示
	name="egon" #name=str("egon")
	print(type(name)
	
	comment='''
	afdsklfsdfmkksmfr
	'''

字符串拼接：
	- 只能字符串之间拼接
	- 字符串之间只能用+或*
	- 其他数据类型转换成字符串就可以拼接
	name='egon'
	msg='hello'
	age=18
	print(name+msg+str(age)
	print(name*10)
	
列表：定义在[]内，用逗号分隔开的多个元素，每个元素可以是任意类型
表示：存取多个值，比如存放人的爱好，人的信息，
	hobbies=['play','read','music','movie']  #hobbies=list(['play','read','music','movie'])
	print(type(hobbies))
	print(hobbies[3])
	print(hobbies[0])
	print(hobbies[-1])

	1=[1,1.3,'egon',['a','b']]
	print(1[3][1])

	info[12232343245,'egon','male',['read','music',]]
	print(info[3][1])
	print(info[1])


字典：定义的{}内，用key=value形式表示一个元素，用逗号隔开
	info={'name':'egon','id':'124324325432','sex':'male','hobbies':['read','music',]}
	print(info['name'])
	print(info['hobbies'][1])

布尔值，一个True一个False
	计算机俗称电脑，即我们编写程序让计算机运行时，
	应该是让计算机无限接近人脑，或者说人脑能干什么，
	计算机就应该能干什么，人脑的主要作用是数据运行与逻辑运算，
	此处的布尔类型就模拟人的逻辑运行，即判断一个条件成立时，
	用True标识，不成立则用False标识
布尔类型：
	print(type(True)
	print(type(False)
	
	AGE=73
	age=18
	print(age > AGE)
	print(age < AGE)

重点：
	#1.可变类型：在id不变的情况下，value可以变，则称为可变类型，如列表，字典
	#2. 不可变类型：value一旦改变，id也改变，则称为不可变类型（id变，意味着创建了新的内存空间） 


格式化输出
	#My name is xxx, my age is xxx

	name=input("user_name>>: ")
	age=input("user_age>>: ")

	print('My name is , my age is',name,age)
	print('My name is %s, my age is %s' %(name,age))
	print('My name is %s, my age is %s' %('egon','18'))
	print('My name is %s, my age is %s' %('egon',18))
	print('My name is %s, my age is %d' %('egon',18))

	# %s %d %f %r
	# %s  表示字符串
    # %d  后面的只能是整型 数字 字符串不行
			print('My name is %s, my age is %d' %('egon','18'))
	# %f  浮点数
	# %r =让我string  非转义  原生字符
	# 

基本运算符
	
	a=100
	b=31
	#res=a+b

	print(a+b)
	print(a-b)
	print(a*b)
	print(a/b) #真正的除法，有整数，有小数
	print(a//b) #地板除，只取整数部分
	a=10
	b=3
	print(a%b) #取模，返回除法的余数
	print(3**2) #地板除，只取整数部分


	# 比较运算
	age=73

	print(age > 30)
	print(age < 30)
	print(age != 30)
	print(age != 73)
	print(age == 73)

	# 赋值运算
	height=180
	height+=1 #height=height+1
	print(height)

	# 逻辑
	age=11
	name='egon'
	print(age > 10 and name == 'ego111111n')
	print(age > 10 or name == 'ego111111n')

	age=11
	print(not age >10)




流程控制之if...else...

 1 如果：女人的年龄>30岁，那么：叫阿姨
	age_of_girl=31
	if age_of_girl > 30:
		print('阿姨好')

 2 如果：女人的年龄>30岁，那么：叫阿姨，否则：叫小姐
	age_of_girl=18
	if age_of_girl > 30:
		print('阿姨好')
	else:
		print('小姐好')

3 如果：女人的年龄>=18并且<22岁并且身高>170并且体重<100并且是漂亮的，那么：表白，否则：叫阿姨
	age_of_girl=18
	height=171
	weight=99
	is_pretty=True
	if age_of_girl >= 18 and age_of_girl < 22 and height > 170 and weight < 100 and is_pretty == True:
		print('表白...')else:
		print('阿姨好')

	#在表白的基础上继续：
	#如果表白成功，那么：在一起
	#否则：打印。。。
	age_of_girl=18
	height=171
	weight=99
	is_pretty=True
	success=False
	if age_of_girl >= 18 and age_of_girl < 22 and height > 170 and weight < 100 and is_pretty == True:
		if success:
			print('表白成功,在一起')
		else:
			print('什么爱情不爱情的,爱nmlgb的爱情,爱nmlg啊...')
	else:
		print('阿姨好')

 4 如果：成绩>=90，那么：优秀
       如果成绩>=80且<90,那么：良好
       如果成绩>=70且<80,那么：普通
       其他情况：很差

	score=input('>>: ')
	score=int(score)
	if score >= 90:
		print('优秀')
	elif score >= 80:
		print('良好')
	elif score >= 70:
		print('普通')
	else:
		print('很差')

　　if 条件1:
　　　　缩进的代码块
　　elif 条件2:
　　　　缩进的代码块
　　elif 条件3:
　　　　缩进的代码块
　　......
　　else:　　
　　　　缩进的代码块


流程控制之while循环	

条件循环：while，语法如下

while 条件:    
	# 循环体
	# 如果条件为真，那么循环体则执行，执行完毕后再次循环，重新判断条件。。。
	# 如果条件为假，那么循环体不执行,循环终止

	# break:跳出本层循环
	# continue:跳出本次循环

#打印0-10
	count=0
	while count <= 10:
		print('loop',count)
		count+=1

#打印0-10之间的偶数
	count=0
	while count <= 10:
		if count%2 == 0:
			print('loop',count)
		count+=1

#打印0-10之间的奇数
	count=0
	while count <= 10:
		if count%2 == 1:
			print('loop',count)
		count+=1

死循环
	import time
	num=0
	while True:
		print('count',num)
		time.sleep(1)
		num+=1　　 

循环嵌套与tag
	tag=True 
　　while tag:
　　　　......
　　　　while tag:
　　　　　　........
　　　　　　while tag:
　　　　　　　　tag=False


#练习，要求如下：
    1 循环验证用户输入的用户名与密码
    2 认证通过后，运行用户重复执行命令
    3 当用户输入命令为quit时，则退出整个程序 

	#实现一：
		name='egon'
		password='123'

		while True:
			inp_name=input('用户名: ')
			inp_pwd=input('密码: ')
			if inp_name == name and inp_pwd == password:
				while True:
					cmd=input('>>: ')
					if not cmd:continue
					if cmd == 'quit':
						break
					print('run <%s>' %cmd)
			else:
				print('用户名或密码错误')
				continue
			break

	#实现二：使用tag
		name='egon'
		password='123'

		tag=True
		while tag:
			inp_name=input('用户名: ')
			inp_pwd=input('密码: ')
			if inp_name == name and inp_pwd == password:
				while tag:
					cmd=input('>>: ')
					if not cmd:continue
					if cmd == 'quit':
						tag=False
						continue
					print('run <%s>' %cmd)
			else:
				print('用户名或密码错误')

				
	break与continue
	
	#break用于退出本层循环
		while True:
			print "123"
			break
			print "456"
			
	#continue用于退出本次循环，继续下一次循环
		while True:
			print "123"
			continue
			print "456"


	while+else

	#与其它语言else 一般只与if 搭配不同，在Python 中还有个while ...else 语句，while 后面的else 作用是指，当while 循环正常执行完，中间没有被break 中止的话，就会执行else后面的语句
		count = 0
		while count <= 5 :
			count += 1
			print("Loop",count)

		else:
			print("循环正常执行完啦")
		print("-----out of while loop ------")
		输出
		Loop 1
		Loop 2
		Loop 3
		Loop 4
		Loop 5
		Loop 6
		循环正常执行完啦
		-----out of while loop ------

	#如果执行过程中被break啦，就不会执行else的语句啦
		count = 0
		while count <= 5 :
			count += 1
			if count == 3:break
			print("Loop",count)

		else:
			print("循环正常执行完啦")
		print("-----out of while loop ------")
		输出

		Loop 1
		Loop 2
		-----out of while loop ------

		
while循环练习题

	#1. 使用while循环输出1 2 3 4 5 6     8 9 10
	#2. 求1-100的所有数的和
	#3. 输出 1-100 内的所有奇数
	#4. 输出 1-100 内的所有偶数
	#5. 求1-2+3-4+5 ... 99的所有数的和
	#6. 用户登陆（三次机会重试）
	#7：猜年龄游戏
	要求：
		允许用户最多尝试3次，3次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出
	#8：猜年龄游戏升级版 
	要求：
		允许用户最多尝试3次
		每尝试3次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y或y, 就继续让其猜3次，以此往复，如果回答N或n，就退出程序
		如何猜对了，就直接退出 

	#题一
		count=1
		while count <= 10:
			if count == 7:
				count+=1
				continue
			print(count)
			count+=1
			

		count=1
		while count <= 10:
			if count != 7:
				print(count)
			count+=1
		
	#题目二
		res=0
		count=1
		while count <= 100:
			res+=count
			count+=1
		print(res)

	#题目三
		count=1
		while count <= 100:
			if count%2 != 0:
				print(count)
			count+=1
		
	#题目四
		count=1
		while count <= 100:
			if count%2 == 0:
				print(count)
			count+=1
		
	#题目五
		res=0
		count=1
		while count <= 5:
			if count%2 == 0:
				res-=count
			else:
				res+=count
			count+=1
		print(res)
		
	#题目六
		count=0
		while count < 3:
			name=input('请输入用户名：')
			password=input('请输入密码：')
			if name == 'egon' and password == '123':
				print('login success')
				break
			else:
				print('用户名或者密码错误')
				count+=1

	#题目七
		age_of_oldboy=73

		count=0
		while count < 3:
			guess=int(input('>>: '))
			if guess == age_of_oldboy:
				print('you got it')
				break
			count+=1

	#题目八
		age_of_oldboy=73

		count=0
		while True:
			if count == 3:
				choice=input('继续(Y/N?)>>: ')
				if choice == 'Y' or choice == 'y':
					count=0
				else:
					break

			guess=int(input('>>: '))
			if guess == age_of_oldboy:
				print('you got it')
				break
			count+=1


-

















	




